#!/bin/sh

exec 2>&1

# Update homer message
cp /workdir/homer_conf/homer_${GLOBAL_LANGUAGE}.yml /workdir/homer/assets/config.yml
sed -i "s|GLOBAL_PORTAL_PATH|${GLOBAL_PORTAL_PATH}|g" /workdir/homer/assets/config.yml
UPTIME=$(($(date +%s) - $(cat /workdir/dyno_start_time)))

if [ "${GLOBAL_LANGUAGE}" = "chs" ]; then
    TIME_FORMAT="$((UPTIME / 60 / 60)) 小时 $(((UPTIME / 60) % 60)) 分钟"
    sed -i "s|Dyno 运行时间: |Dyno 运行时间: ${TIME_FORMAT}|g" /workdir/homer/assets/config.yml
else
    TIME_FORMAT="$((UPTIME / 60 / 60)) hours $(((UPTIME / 60) % 60)) minutes"
    sed -i "s|Dyno Uptime: |Dyno Uptime: ${TIME_FORMAT}|g" /workdir/homer/assets/config.yml
fi

sleep 600

# Refresh rclone config file
DRIVE_NAME="$(grep ^drive-name /mnt/data/config/script.conf | cut -d= -f2-)"
DRIVE_NAME_AUTO="$(sed -n '1p' /mnt/data/config/rclone.conf | sed "s/.*\[//g;s/\].*//g;s/\r$//")"
if [ "${DRIVE_NAME}" = "auto" ]; then
    DRIVENAME=${DRIVE_NAME_AUTO}
else
    DRIVENAME=${DRIVE_NAME}
fi

curl -s -u ${GLOBAL_USER}:${GLOBAL_PASSWORD} -H "Content-Type: application/json" -f -X POST -d '{"fs":"'"${DRIVENAME}"':/"}' 'localhost:61802/operations/about'

# Backup config files
BACK_UP() {
    DIR_TMP="$(mktemp -d)"
    mkdir -p ${DIR_TMP}/config/qBittorrent/data
    cp -r /mnt/data/config/qBittorrent/config ${DIR_TMP}/config/qBittorrent 2>/dev/null
    cp -r /mnt/data/config/qBittorrent/data/nova3 ${DIR_TMP}/config/qBittorrent/data 2>/dev/null
    cp -r /mnt/data/config/olivetin ${DIR_TMP}/config
    cp -r /workdir/.pyload/settings ${DIR_TMP}/config
    cp -r /mnt/data/.cache/gallery-dl ${DIR_TMP}/config 2>/dev/null
    cp /mnt/data/config/* ${DIR_TMP}/config 2>/dev/null
    cp -r /mnt/data/.config ${DIR_TMP}/config 2>/dev/null
    tar -zcf ${DIR_TMP}/backup.tar.gz -C ${DIR_TMP} config
    VALUE=$(base64 -w 0 ${DIR_TMP}/backup.tar.gz)
    echo \{\"_id\":\"backup\",\"value\":\"${VALUE}\"\} >./body
    curl -s -4 --retry 4 -X POST https://${CLOUDFLARE_WORKERS_HOST}/?key=${CLOUDFLARE_WORKERS_KEY} \
    -d @body -H "Content-Type: application/json"
    rm -rf ${DIR_TMP} ./body
}

RESTORE_BACKUP() {
    BACKUP=$(curl -4 --retry 4 https://${CLOUDFLARE_WORKERS_HOST}/backup?key=${CLOUDFLARE_WORKERS_KEY} | jq .value)
    DIR_TMP="$(mktemp -d)"
    echo ${BACKUP} | base64 -d >${DIR_TMP}/backup.tar.gz
    tar -zxf ${DIR_TMP}/backup.tar.gz -C /mnt/data
    mv /mnt/data/config/settings /workdir/.pyload 2>/dev/null
    mv /mnt/data/config/gallery-dl /mnt/data/.cache 2>/dev/null
    mv /mnt/data/config/.config /mnt/data 2>/dev/null
    rm -rf ${DIR_TMP}
}

WORKER_STATUS=$(curl -4 --retry 4 https://${CLOUDFLARE_WORKERS_HOST} | jq .status | sed "s|\"||g")

if [ "${WORKER_STATUS}" = "Running" ]; then
    if [ -f /workdir/workers_fail.lock ]; then
        RESTORE_BACKUP
        rm -f /workdir/workers_fail.lock
    else
        BACK_UP
    fi
else
    if [ "${GLOBAL_LANGUAGE}" = "chs" ]; then
        echo "无法连接 Cloudflare Workers"
    else
        echo "Cloudflare Workers is not working"
    fi
fi
